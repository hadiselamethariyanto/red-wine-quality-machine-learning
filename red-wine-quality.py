# -*- coding: utf-8 -*-
"""Untitled19.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VkI3ulYVRGc-f4K-I_emSAzAUXIpHtuI

**Install kaggle package**
"""

# install kaggle package
!pip install -q kaggle

"""**Upload kaggle.json**"""

# upload kaggle.json
from google.colab import files
files.upload()

"""**Buat direktori dan ubah izin agar bisa memasukkan Json Kaggle**"""

# make directory and change permission
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json
!ls ~/.kaggle

"""**Download Dataset langsung dari Kaggle**"""

# download dataset, choose 'copy api command' from kaggle dataset
!kaggle datasets download -d uciml/red-wine-quality-cortez-et-al-2009

"""**Ekstrak ZIP**"""

# unzip
!mkdir wines
!unzip -qq red-wine-quality-cortez-et-al-2009.zip -d wines
!ls wines

"""**Import Module yang dibutuhkan**"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
# %matplotlib inline
import seaborn as sns

"""**Memuat Dataset kedalam dataframe menggunakan Pandas**"""

# load dataset
wine = pd.read_csv('wines/winequality-red.csv')
wine

"""**Mengecek Informasi dari Dataset**"""

# check info from dataset
wine.info()

"""**Mengecek stastitik Dataset**"""

#show statistic data
wine.describe()

"""**Mengecek total data**"""

#show total data
wine.shape

"""# **Explorisasi Data / Visualisasi Data**

**Visualisasikan Outliers pada Fitur Numerik**
"""

# visualisasikan data alcohol
sns.boxplot(x=wine['alcohol'])

# visualisasikan data sulphates
sns.boxplot(x=wine['sulphates'])

# visualisasikan data pH
sns.boxplot(x=wine['pH'])

# visualisasikan data fixed acidity
sns.boxplot(x=wine['fixed acidity'])

# visualisasikan data volatile acidity
sns.boxplot(x=wine['volatile acidity'])

# visualisasikan data citric acid
sns.boxplot(x=wine['citric acid'])

# visualisasikan data residual sugar
sns.boxplot(x=wine['residual sugar'])

# visualisasikan data chlorides
sns.boxplot(x=wine['chlorides'])

# visualisasikan data free sulfur dioxide
sns.boxplot(x=wine['free sulfur dioxide'])

# visualisasikan data total sulfur dioxide
sns.boxplot(x=wine['total sulfur dioxide'])

# visualisasikan data density
sns.boxplot(x=wine['density'])

# visualisasikan data quality
sns.boxplot(x=wine['quality'])

"""**Menangani Outlier**"""

Q1 = wine.quantile(0.25)
Q3 = wine.quantile(0.75)
IQR=Q3-Q1
wine=wine[~((wine<(Q1-1.5*IQR))|(wine>(Q3+1.5*IQR))).any(axis=1)]

# Cek ukuran dataset setelah kita drop outliers
wine.shape

"""**Visualisasi Fitur Numerik**"""

wine.hist(bins=50, figsize=(20,15))
plt.show()

"""**Multivariate Analysis**"""

# Mengamati hubungan antar fitur numerik dengan fungsi pairplot()
sns.pairplot(wine, diag_kind = 'kde')

plt.figure(figsize=(10, 8))
correlation_matrix = wine.corr().round(2)

# Untuk menge-print nilai di dalam kotak, gunakan parameter anot=True
sns.heatmap(data=correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5, )
plt.title("Correlation Matrix untuk Fitur Numerik ", size=20)

#drop variable yang tidak memiliki korelasi
wine.drop(['residual sugar','pH', 'free sulfur dioxide'], inplace=True, axis=1)
wine.head()

"""**Split dataset dengan ukuran 80:20**"""

from sklearn.model_selection import train_test_split

#melakukan pembagian data untuk test dan train
X = wine.drop(["quality"],axis =1)
y = wine["quality"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 123)

#menampilkan total pembagian data
print(f'Total # of sample in whole dataset: {len(X)}')
print(f'Total # of sample in train dataset:Â {len(X_train)}')
print(f'Total # of sample in test dataset: {len(X_test)}')

"""**Standarisasi**"""

from sklearn.preprocessing import StandardScaler

#melakukan standarisasi untuk fitur numerik
numerical_features = ['alcohol', 'sulphates', 'density','total sulfur dioxide', 'chlorides','citric acid','volatile acidity','fixed acidity']
scaler = StandardScaler()
scaler.fit(X_train[numerical_features])
X_train[numerical_features] = scaler.transform(X_train.loc[:, numerical_features])
X_train[numerical_features].head()

# mengecek nilai mean dan standar deviasi pada setelah proses standarisasi
X_train[numerical_features].describe().round(4)

"""**Penyiapan dataframe untuk analisis hasil model**"""

# Siapkan dataframe untuk analisis model
models = pd.DataFrame(index=['train_mse', 'test_mse'],
                      columns=['KNN', 'RandomForest', 'Boosting'])

"""**Modelling dengan KNN**"""

from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import mean_squared_error

knn = KNeighborsRegressor(n_neighbors=10)
knn.fit(X_train, y_train)

models.loc['train_mse','knn'] = mean_squared_error(y_pred = knn.predict(X_train), y_true=y_train)

"""**Modelling dengan Random Forest**"""

# Impor library yang dibutuhkan
from sklearn.ensemble import RandomForestRegressor

# buat model prediksi
RF = RandomForestRegressor(n_estimators=50, max_depth=16, random_state=55, n_jobs=-1)
RF.fit(X_train, y_train)

models.loc['train_mse','RandomForest'] = mean_squared_error(y_pred=RF.predict(X_train), y_true=y_train)

"""**Modelling dengan Boosting**"""

from sklearn.ensemble import AdaBoostRegressor

boosting = AdaBoostRegressor(learning_rate=0.05, random_state=55)                             
boosting.fit(X_train, y_train)
models.loc['train_mse','Boosting'] = mean_squared_error(y_pred=boosting.predict(X_train), y_true=y_train)

"""**Persiapan dan Penghitungan Mean Squared Error masing-masing algoritme**"""

# Buat variabel mse yang isinya adalah dataframe nilai mse data train dan test pada masing-masing algoritma
mse = pd.DataFrame(columns=['train', 'test'], index=['KNN','RF','Boosting'])

# Buat dictionary untuk setiap algoritma yang digunakan
model_dict = {'KNN': knn, 'RF': RF, 'Boosting': boosting}

# Hitung Mean Squared Error masing-masing algoritma pada data train dan test
for name, model in model_dict.items():
  mse.loc[name, 'train'] = mean_squared_error(y_true=y_train, y_pred=model.predict(X_train))/1e3
  mse.loc[name, 'test'] = mean_squared_error(y_true=y_test, y_pred=model.predict(X_test))/1e3
# Panggil mse
mse

"""**Visualiasi chart bar Hasil penghitungan Mean Squared Error masing-masing algoritma**"""

fig, ax = plt.subplots()
mse.sort_values(by='test', ascending=False).plot(kind='barh', ax=ax, zorder=3)
ax.grid(zorder=0)

"""**Hasil Prediksi berdasarkan penghitungan Mean Squared Error masing-masing algoritma**"""

prediksi = X_test.iloc[:1].copy()
pred_dict = {'y_true':y_test[:1]}
for name, model in model_dict.items():
  pred_dict['prediksi_'+name] = model.predict(prediksi).round(1)

pd.DataFrame(pred_dict)